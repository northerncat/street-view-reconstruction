{"version":3,"sources":["utils/StreetViewUtility.ts","components/depth-image-canvas/DepthImageCanvas.tsx","components/depth-planes-canvas/DepthPlanesCanvas.tsx","components/depth-map-data-display/DepthMapDataDisplay.tsx","components/street-view-panorama/StreetViewPanorama.tsx","app/StreetViewReconstructionApp.tsx","serviceWorker.ts","index.tsx"],"names":["create2DArray","width","height","array","Array","h","getStreetViewDepthDataUrl","options","Object","keys","map","key","encodeURIComponent","join","StreetViewUtility","lat","long","callback","url","output","ll","dm","fetch","then","response","ok","Error","statusText","json","parseDepthMapString","model","depth_map","rawDepthMapData","length","replace","inflate","Buffer","from","error","result","dataView","buf","Uint8Array","i","DataView","buffer","toDataView","metaData","getDepthMapMetaData","geometry","getStreetViewGeometry","depthImage","getDepthImage","bufferData","metaDataSize","getUint8","numberOfPlanes","getUint16","offset","planes","planeIndices","w","planesStartIndex","p","n","x","getFloat32","y","z","d","v1","v2","theta","Math","PI","sinTheta","sin","cosTheta","cos","planeIndex","phi","viewDirection","plane","distance","abs","DepthImageCanvas","useEffect","depthImageCanvas","document","getElementById","ctx","getContext","clearRect","maxDistance","imageData","createImageData","index","grayScale","data","max","putImageData","id","className","PLANE_INDEX_VIZ_COLORS","0","1","2","3","4","5","6","DepthPlanesCanvas","props","planesData","depthMapCanvas","indices","color","DepthMapDataDisplay","depthMapData","StreetViewPanorama","location","updateLocation","useState","undefined","panorama","setPanorama","svPano","google","maps","addListener","newLocation","getPosition","lng","StreetViewService","getPanorama","radius","status","StreetViewStatus","OK","setPano","pano","setVisible","style","INITIAL_LATITUDE","parseFloat","split","INITIAL_LONGITUDE","StreetViewReconstructionApp","depthMap","setDepthMap","setPlanesData","setDepthImage","LatLng","setLocation","fetchStreetViewImage","console","log","toFixed","latitude","longitude","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bac370fa.chunk.js","sourcesContent":["import { inflate } from 'zlib';\n\nexport interface Point {\n    x: number,\n    y: number,\n    z: number,\n};\n\nexport interface StreetViewPointCloud {\n    width: number,\n    height: number,\n    points: Point[][],\n};\n\nexport type DepthImage = Array<Array<number>>;\n\nexport interface Vector {\n    x: number,\n    y: number,\n    z: number,\n};\n\nfunction dot(v1: Vector, v2: Vector) : number {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n};\n\nexport interface Plane {\n    n: Vector,\n    d: number,\n};\n\nexport interface DepthMapMetaData {\n    metaDataSize: number,\n    numberOfPlanes: number,\n    width: number,\n    height: number,\n    offset: number,\n};\n\nexport interface StreetViewGeometry {\n    width: number,\n    height: number,\n    planeIndices: number[][],\n    planes: Plane[],\n};\n\nexport interface StreetViewDepthMap {\n    metaData: DepthMapMetaData,\n    bufferData: DataView,\n    geometry: StreetViewGeometry,\n};\n\nexport interface StreetViewResponse {\n    model: {\n        depth_map: string,\n    },\n};\n\nexport type DepthMapCallback = ([depthMap, depthImage]: [StreetViewDepthMap, DepthImage]) => void;\n\nfunction toDataView(buf: Buffer) : DataView {\n    const array = new Uint8Array(buf.length);\n    for (var i = 0; i < buf.length; ++i) {\n        array[i] = buf[i];\n    }\n    return new DataView(array.buffer);\n};\n\nfunction create2DArray<T>(width: number, height: number) : T[][] {\n    const array : T[][] = new Array<Array<T>>(height);\n    for (let h = 0; h < height; h++) {\n        array[h] = new Array<T>(width);\n    }\n    return array;\n};\n\nfunction getStreetViewDepthDataUrl(options : {[key: string] : any}) : string {\n    const queryString : string = Object.keys(options)\n        .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(options[key]))\n        .join('&');\n    return 'https://maps.google.com/cbk?' + queryString;\n}\n\nexport default class StreetViewUtility {\n\n    static fetchStreetViewImage(lat: number = 0.0, long: number = 0.0, callback: DepthMapCallback) : Promise<void> {\n        const url = getStreetViewDepthDataUrl({ output: 'json', ll: `${lat},${long}`, dm: 1 });\n        return fetch(url)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then((response) => {\n                StreetViewUtility.parseDepthMapString(response.model.depth_map, callback);\n            });\n    }\n\n    static parseDepthMapString(rawDepthMapData: string, callback: DepthMapCallback) : void {\n        \n        while (rawDepthMapData.length % 4 !== 0) {\n            rawDepthMapData += '=';\n        }\n        rawDepthMapData = rawDepthMapData.replace(/-/g, '+');\n        rawDepthMapData = rawDepthMapData.replace(/_/g, '/');\n\n        inflate(Buffer.from(rawDepthMapData, 'base64'), (error: Error | null, result: Buffer) => {\n            if (error) {\n                throw error;\n            }\n            const dataView : DataView = toDataView(result);\n            const metaData : DepthMapMetaData = StreetViewUtility.getDepthMapMetaData(dataView);\n            const geometry : StreetViewGeometry = StreetViewUtility.getStreetViewGeometry(metaData, dataView);\n            const depthImage : number[][] = StreetViewUtility.getDepthImage(geometry);\n            callback([\n                {\n                    metaData,\n                    bufferData: dataView,\n                    geometry,\n                },\n                depthImage\n            ]);\n        });\n    }\n\n    static getDepthMapMetaData(buffer: DataView) : DepthMapMetaData {\n        return {\n            metaDataSize: buffer.getUint8(0),\n            numberOfPlanes: buffer.getUint16(1, true),\n            width: buffer.getUint16(3, true),\n            height: buffer.getUint16(5, true),\n            offset: buffer.getUint16(7, true),\n        };\n    }\n\n    static getStreetViewGeometry(metaData: DepthMapMetaData, buffer : DataView) : StreetViewGeometry {\n        const planes : Plane[] = new Array<Plane>(metaData.numberOfPlanes);\n        const planeIndices : number[][] = create2DArray<number>(metaData.width, metaData.height);\n        \n        // parsing referenced from https://github.com/proog128/GSVPanoDepth.js\n        for (let h = 0; h < metaData.height; h++) {\n            for (let w = 0; w < metaData.width; w++) {\n                planeIndices[h][w] = buffer.getUint8(metaData.offset + w + h * metaData.width);\n            }\n        }\n\n        const planesStartIndex = metaData.offset + metaData.height * metaData.width;\n        for (let p = 0; p < metaData.numberOfPlanes; ++p) {\n            // each plane is represented by four 32-bit floats\n            const offset : number = planesStartIndex + p * 4 * 4;\n            planes[p] = {\n                n: {\n                    x: buffer.getFloat32(offset, true),\n                    y: buffer.getFloat32(offset + 4, true),\n                    z: buffer.getFloat32(offset + 8, true),            \n                },\n                d: buffer.getFloat32(offset + 12, true),\n            };\n        }\n        return { width: metaData.width, height: metaData.height, planes, planeIndices };\n    }\n\n    static getDepthImage(geometry: StreetViewGeometry) {\n        const depthImage : number[][] = create2DArray(geometry.width, geometry.height);\n\n        // parsing referenced from https://github.com/proog128/GSVPanoDepth.js\n        for (let h = 0; h < depthImage.length; h++) {\n            const theta : number = (geometry.height - h - 0.5) / geometry.height * Math.PI;\n            const sinTheta : number = Math.sin(theta);\n            const cosTheta : number = Math.cos(theta);\n            for (let w = 0; w < depthImage[0].length; w++) {\n                const planeIndex : number = geometry.planeIndices[h][w];\n                if (planeIndex > 0) {\n                    const phi : number = (geometry.width - w - 0.5) * 2 * Math.PI / geometry.width;\n                    const viewDirection : Vector = {\n                        x: sinTheta * Math.cos(phi),\n                        y: sinTheta * Math.sin(phi),\n                        z: cosTheta,\n                    };\n                    const plane : Plane = geometry.planes[planeIndex];\n                    const distance : number = Math.abs(plane.d / (dot(plane.n, viewDirection)));\n                    depthImage[h][w] = distance;\n                } else {\n                    depthImage[h][w] = 0.0;\n                }\n            }\n        }\n        return depthImage;\n    }\n\n};","\nimport React, { useEffect } from 'react';\n\nimport './depthImageCanvas.css';\n\nconst DEPTH_IMAGE_VIZ_FACTOR : number = 2.5;\n\nexport interface DepthImageCanvasProps {\n    width: number,\n    height: number,\n    depthImage: number[][]|undefined,\n};\n\nconst DepthImageCanvas = ({\n    width,\n    height,\n    depthImage,\n} : DepthImageCanvasProps) => {\n\n    useEffect(() => {\n        const depthImageCanvas = document.getElementById('depth-image') as HTMLCanvasElement;\n        if (depthImage && depthImageCanvas) {\n            const ctx : CanvasRenderingContext2D|null = depthImageCanvas!.getContext('2d');\n            ctx?.clearRect(0, 0, width, height);\n    \n            let maxDistance : number = 0.0;\n            const imageData : ImageData = ctx!.createImageData(width, height);\n            for (let h = 0; h < height; ++h) {\n                for (let w = 0; w < width; ++w) {\n                    const index = h * width + w;\n                    const grayScale = depthImage[h][w] * DEPTH_IMAGE_VIZ_FACTOR;\n                    imageData.data[index * 4] = grayScale;\n                    imageData.data[index * 4 + 1] = grayScale;\n                    imageData.data[index * 4 + 2] = grayScale;\n                    imageData.data[index * 4 + 3] = 255.0;\n                    maxDistance = Math.max(depthImage[h][w], maxDistance);\n                }\n            }\n            // console.log('Maximum distance: ', maxDistance);\n            ctx?.putImageData(imageData, 0, 0);\n        }\n    }, [depthImage, width, height]);\n    \n    return <canvas id='depth-image' className='depth-image-canvas' width={width} height={height} />\n};\n\nexport default DepthImageCanvas;\n","import React, { useEffect } from 'react';\n\nimport { StreetViewGeometry } from '../../utils/StreetViewUtility';\n\nimport './depthPlanesCanvas.css';\n\nconst PLANE_INDEX_VIZ_COLORS : {[key: number] : number[]} = {\n    0: [255, 255, 255],\n    1: [255, 0, 0],\n    2: [0, 255, 0],\n    3: [0, 0, 255],\n    4: [255, 255, 0],\n    5: [255, 0, 255],\n    6: [0, 255, 255],\n};\n\nexport interface DepthPlanesCanvasProps {\n    planesData: StreetViewGeometry|undefined,\n};\n\nconst DepthPlanesCanvas = (props : DepthPlanesCanvasProps) => {\n    \n    const { planesData } = props;\n\n    useEffect(() => {\n        const depthMapCanvas = document.getElementById('depth-planes') as HTMLCanvasElement;\n        if (depthMapCanvas && planesData) {\n            const ctx : CanvasRenderingContext2D|null = depthMapCanvas!.getContext('2d');\n            ctx?.clearRect(0, 0, 512, 256);\n\n            const indices = planesData.planeIndices;\n            const imageData : ImageData = ctx!.createImageData(planesData.width, planesData.height);\n            for (let h = 0; h < planesData.height; ++h) {\n                for (let w = 0; w < planesData.width; ++w) {\n                    const index = h * planesData.width + w;\n                    const color = PLANE_INDEX_VIZ_COLORS[indices[h][w]];\n                    if (color) {\n                        imageData.data[index * 4] = color[0];\n                        imageData.data[index * 4 + 1] = color[1];\n                        imageData.data[index * 4 + 2] = color[2];\n                    }\n                    imageData.data[index * 4 + 3] = 255.0;\n                }\n            }\n            ctx?.putImageData(imageData, 0, 0);\n        }\n    }, [planesData]);\n\n    return <canvas id='depth-planes' width={planesData?.width || 512} height={planesData?.height || 256} />;\n};\n\nexport default DepthPlanesCanvas;\n","\nimport React from 'react';\n\nimport { StreetViewDepthMap } from '../../utils/StreetViewUtility';\n\nexport interface DepthMapDataDisplayProps {\n    depthMapData: StreetViewDepthMap|undefined,\n};\n\nconst DepthMapDataDisplay = ({\n    depthMapData\n} : DepthMapDataDisplayProps) => {\n    if (!depthMapData) {\n        return null;\n    }\n\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td>Number of Planes: </td>\n                    <td>{depthMapData.metaData.numberOfPlanes}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default DepthMapDataDisplay;\n","import React, { useState, useEffect } from 'react';\n\nimport './streetViewPanorama.css';\n\nexport interface StreetViewPanoramaProps {\n    location: google.maps.LatLng,\n    updateLocation: (latitude: number, longitude: number) => void,\n};\n\nconst StreetViewPanorama = ({\n    location,\n    updateLocation,\n} : StreetViewPanoramaProps) => {\n    \n    const [panorama, setPanorama] = useState<google.maps.StreetViewPanorama|undefined>(undefined);\n\n    useEffect(() => {\n        const svPano = new google.maps.StreetViewPanorama(document.getElementById('panorama') as Element);\n        svPano.addListener('position_changed', function() {\n            const newLocation = svPano.getPosition();\n            updateLocation(newLocation.lat(), newLocation.lng());\n        });\n        setPanorama(svPano);\n    }, []);\n\n    useEffect(() => {\n        if (panorama) {\n            const streetViewService = new google.maps.StreetViewService();\n            streetViewService.getPanorama({\n                    location: location,\n                    radius: 50,\n                },\n                (data: google.maps.StreetViewPanoramaData|null, status: google.maps.StreetViewStatus) => {\n                    if (status === google.maps.StreetViewStatus.OK) {\n                        panorama.setPano(data!.location!.pano!);\n                        panorama.setVisible(true);\n                    }\n                },\n            );\n        }\n    }, [panorama, location]);\n\n    return <div id='panorama' style={{ width: 512, height: 512 }} />;\n};\n\nexport default StreetViewPanorama;\n","import React, { useState, useEffect } from 'react';\nimport './StreetViewReconstructionApp.css';\nimport StreetViewUtility, { StreetViewGeometry, DepthMapCallback, DepthImage, StreetViewDepthMap } from '../utils/StreetViewUtility';\n\nimport DepthImageCanvas from '../components/depth-image-canvas/DepthImageCanvas';\nimport DepthPlanesCanvas from '../components/depth-planes-canvas/DepthPlanesCanvas';\nimport DepthMapDataDisplay from '../components/depth-map-data-display/DepthMapDataDisplay';\nimport StreetViewPanorama from '../components/street-view-panorama/StreetViewPanorama';\n\nconst LOCATION_STRING = '37.77717636796375,-122.3951574097429';\nconst INITIAL_LATITUDE: number = parseFloat(LOCATION_STRING.split(',')[0]);\nconst INITIAL_LONGITUDE: number = parseFloat(LOCATION_STRING.split(',')[1]);\n\nconst StreetViewReconstructionApp : React.FC<{}> = () => {\n\n    const [depthMap, setDepthMap] = useState<StreetViewDepthMap|undefined>(undefined);\n    const [planesData, setPlanesData] = useState<StreetViewGeometry|undefined>(undefined);\n    const [depthImage, setDepthImage] = useState<DepthImage|undefined>(undefined);\n    const [location, setLocation] = useState<google.maps.LatLng>(new google.maps.LatLng(INITIAL_LATITUDE, INITIAL_LONGITUDE));\n\n    useEffect(() => {\n        const loadDataCallback : DepthMapCallback = ([depthMap, depthImage]) => {\n            setDepthMap(depthMap);\n            setPlanesData(depthMap.geometry);\n            setDepthImage(depthImage);\n        };\n\n        try {\n            StreetViewUtility.fetchStreetViewImage(location.lat(), location.lng(), loadDataCallback);\n        } catch (error) {\n            // show error message\n            console.log(error);\n        }\n    }, [location]);\n\n    const drawDepthImage = true;\n    const drawDepthMap = true;\n\n    const updateLocation = (latitude: number, longitude: number) => {\n        setLocation(new google.maps.LatLng(latitude, longitude));\n    };\n\n    return (\n        <div className='App'>\n            <header className='App-header'>\n                <h2>Reconstrct Depth Maps from Google Street View</h2>\n                <h4>Navigate on the Street View Panorama to see the reconstructed depth maps</h4>\n                <div className='App-header_info'>\n                    <label>Latitude: {location.lat().toFixed(4)}</label>\n                    <br/>\n                    <label>Longitude: {location.lng().toFixed(4)}</label>\n                    {<DepthMapDataDisplay depthMapData={depthMap} />}\n                </div>\n            </header>\n            <div className='App-body'>\n                <div className='App-body__depth-maps'>\n                  <h4>Detected planes color-coded by index</h4>\n                  {drawDepthMap && <DepthPlanesCanvas planesData={planesData} />}\n                  <h4>Shaded depth image based on depth</h4>\n                  {drawDepthImage && <DepthImageCanvas width={512} height={256} depthImage={depthImage} />}\n                </div>\n                <div className='App-body__panorama'>\n                  <h4>StreeView Panorama</h4>\n                  <StreetViewPanorama location={location} updateLocation={updateLocation}/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default StreetViewReconstructionApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StreetViewReconstructionApp from './app/StreetViewReconstructionApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreetViewReconstructionApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}