{"version":3,"sources":["utils/StreetViewUtility.ts","components/depth-image-canvas/DepthImageCanvas.tsx","components/depth-planes-canvas/DepthPlanesCanvas.tsx","components/depth-map-data-display/DepthMapDataDisplay.tsx","app/StreetViewReconstructionApp.tsx","serviceWorker.ts","index.tsx"],"names":["create2DArray","width","height","array","Array","h","getStreetViewDepthDataUrl","options","Object","keys","map","key","encodeURIComponent","join","StreetViewUtility","lat","long","callback","url","output","ll","dm","fetch","then","response","ok","Error","statusText","json","parseDepthMapString","model","depth_map","rawDepthMapData","length","replace","inflate","Buffer","from","error","result","dataView","buf","Uint8Array","i","DataView","buffer","toDataView","metaData","getDepthMapMetaData","geometry","getStreetViewGeometry","depthImage","getDepthImage","bufferData","metaDataSize","getUint8","numberOfPlanes","getUint16","offset","planes","planeIndices","w","planesStartIndex","p","n","x","getFloat32","y","z","d","v1","v2","theta","Math","PI","sinTheta","sin","cosTheta","cos","planeIndex","phi","viewDirection","plane","distance","abs","DepthImageCanvas","useEffect","depthImageCanvas","document","getElementById","ctx","getContext","clearRect","maxDistance","imageData","createImageData","index","grayScale","data","max","putImageData","id","className","PLANE_INDEX_VIZ_COLORS","0","1","2","3","4","5","6","DepthPlanesCanvas","props","planesData","depthMapCanvas","indices","color","DepthMapDataDisplay","depthMapData","LATITUDE","parseFloat","split","LONGITUDE","StreetViewReconstructionApp","useState","undefined","depthMap","setDepthMap","setPlanesData","setDepthImage","panorama","setPanorama","loadDataCallback","fetchStreetViewImage","console","log","google","maps","StreetViewPanorama","StreetViewService","getPanorama","location","LatLng","radius","status","StreetViewStatus","OK","setPano","pano","setVisible","style","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0NAoEA,SAASA,EAAiBC,EAAeC,GAErC,IADA,IAAMC,EAAgB,IAAIC,MAAgBF,GACjCG,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,EAAME,GAAK,IAAID,MAASH,GAE5B,OAAOE,EAGX,SAASG,EAA0BC,GAI/B,MAAO,+BAHsBC,OAAOC,KAAKF,GACpCG,KAAI,SAACC,GAAD,OAASC,mBAAmBD,GAAO,IAAMC,mBAAmBL,EAAQI,OACxEE,KAAK,K,IAIOC,E,oHAE+F,IAApFC,EAAmF,uDAArE,EAAKC,EAAgE,uDAAjD,EAAKC,EAA4C,uCACrGC,EAAMZ,EAA0B,CAAEa,OAAQ,OAAQC,GAAG,GAAD,OAAKL,EAAL,YAAYC,GAAQK,GAAI,IAClF,OAAOC,MAAMJ,GACRK,MAAK,SAACC,GACH,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,YAE7B,OAAOH,EAASI,UAEnBL,MAAK,SAACC,GACHV,EAAkBe,oBAAoBL,EAASM,MAAMC,UAAWd,Q,0CAIjDe,EAAyBf,GAEhD,KAAOe,EAAgBC,OAAS,IAAM,GAClCD,GAAmB,IAGvBA,GADAA,EAAkBA,EAAgBE,QAAQ,KAAM,MACdA,QAAQ,KAAM,KAEhDC,kBAAQC,EAAOC,KAAKL,EAAiB,WAAW,SAACM,EAAqBC,GAClE,GAAID,EACA,MAAMA,EAEV,IAAME,EAnDlB,SAAoBC,GAEhB,IADA,IAAMtC,EAAQ,IAAIuC,WAAWD,EAAIR,QACxBU,EAAI,EAAGA,EAAIF,EAAIR,SAAUU,EAC9BxC,EAAMwC,GAAKF,EAAIE,GAEnB,OAAO,IAAIC,SAASzC,EAAM0C,QA8CUC,CAAWP,GACjCQ,EAA8BjC,EAAkBkC,oBAAoBR,GACpES,EAAgCnC,EAAkBoC,sBAAsBH,EAAUP,GAClFW,EAA0BrC,EAAkBsC,cAAcH,GAChEhC,EAAS,CACL,CACI8B,WACAM,WAAYb,EACZS,YAEJE,S,0CAKeN,GACvB,MAAO,CACHS,aAAcT,EAAOU,SAAS,GAC9BC,eAAgBX,EAAOY,UAAU,GAAG,GACpCxD,MAAO4C,EAAOY,UAAU,GAAG,GAC3BvD,OAAQ2C,EAAOY,UAAU,GAAG,GAC5BC,OAAQb,EAAOY,UAAU,GAAG,M,4CAIPV,EAA4BF,GAKrD,IAJA,IAAMc,EAAmB,IAAIvD,MAAa2C,EAASS,gBAC7CI,EAA4B5D,EAAsB+C,EAAS9C,MAAO8C,EAAS7C,QAGxEG,EAAI,EAAGA,EAAI0C,EAAS7C,OAAQG,IACjC,IAAK,IAAIwD,EAAI,EAAGA,EAAId,EAAS9C,MAAO4D,IAChCD,EAAavD,GAAGwD,GAAKhB,EAAOU,SAASR,EAASW,OAASG,EAAIxD,EAAI0C,EAAS9C,OAKhF,IADA,IAAM6D,EAAmBf,EAASW,OAASX,EAAS7C,OAAS6C,EAAS9C,MAC7D8D,EAAI,EAAGA,EAAIhB,EAASS,iBAAkBO,EAAG,CAE9C,IAAML,EAAkBI,EAAuB,EAAJC,EAAQ,EACnDJ,EAAOI,GAAK,CACRC,EAAG,CACCC,EAAGpB,EAAOqB,WAAWR,GAAQ,GAC7BS,EAAGtB,EAAOqB,WAAWR,EAAS,GAAG,GACjCU,EAAGvB,EAAOqB,WAAWR,EAAS,GAAG,IAErCW,EAAGxB,EAAOqB,WAAWR,EAAS,IAAI,IAG1C,MAAO,CAAEzD,MAAO8C,EAAS9C,MAAOC,OAAQ6C,EAAS7C,OAAQyD,SAAQC,kB,oCAGhDX,GAIjB,IAHA,IA9IKqB,EAAYC,EA8IXpB,EAA0BnD,EAAciD,EAAShD,MAAOgD,EAAS/C,QAG9DG,EAAI,EAAGA,EAAI8C,EAAWlB,OAAQ5B,IAInC,IAHA,IAAMmE,GAAkBvB,EAAS/C,OAASG,EAAI,IAAO4C,EAAS/C,OAASuE,KAAKC,GACtEC,EAAoBF,KAAKG,IAAIJ,GAC7BK,EAAoBJ,KAAKK,IAAIN,GAC1BX,EAAI,EAAGA,EAAIV,EAAW,GAAGlB,OAAQ4B,IAAK,CAC3C,IAAMkB,EAAsB9B,EAASW,aAAavD,GAAGwD,GACrD,GAAIkB,EAAa,EAAG,CAChB,IAAMC,EAA4C,GAA5B/B,EAAShD,MAAQ4D,EAAI,IAAWY,KAAKC,GAAKzB,EAAShD,MACnEgF,EAAyB,CAC3BhB,EAAGU,EAAWF,KAAKK,IAAIE,GACvBb,EAAGQ,EAAWF,KAAKG,IAAII,GACvBZ,EAAGS,GAEDK,EAAgBjC,EAASU,OAAOoB,GAChCI,EAAoBV,KAAKW,IAAIF,EAAMb,GA/JhDC,EA+JyDY,EAAMlB,EA/JnDO,EA+JsDU,EA9JpEX,EAAGL,EAAIM,EAAGN,EAAIK,EAAGH,EAAII,EAAGJ,EAAIG,EAAGF,EAAIG,EAAGH,IA+J7BjB,EAAW9C,GAAGwD,GAAKsB,OAEnBhC,EAAW9C,GAAGwD,GAAK,EAI/B,OAAOV,M,wSC9IAkC,G,MAjCU,SAAC,GAIK,IAH3BpF,EAG0B,EAH1BA,MACAC,EAE0B,EAF1BA,OACAiD,EAC0B,EAD1BA,WA2BA,OAxBAmC,qBAAU,WACN,IAAMC,EAAmBC,SAASC,eAAe,eACjD,GAAItC,GAAcoC,EAAkB,CAChC,IAAMG,EAAsCH,EAAkBI,WAAW,MACtE,OAAHD,QAAG,IAAHA,KAAKE,UAAU,EAAG,EAAG3F,EAAOC,GAI5B,IAFA,IAAI2F,EAAuB,EACrBC,EAAwBJ,EAAKK,gBAAgB9F,EAAOC,GACjDG,EAAI,EAAGA,EAAIH,IAAUG,EAC1B,IAAK,IAAIwD,EAAI,EAAGA,EAAI5D,IAAS4D,EAAG,CAC5B,IAAMmC,EAAQ3F,EAAIJ,EAAQ4D,EACpBoC,EAzBc,IAyBF9C,EAAW9C,GAAGwD,GAChCiC,EAAUI,KAAa,EAARF,GAAaC,EAC5BH,EAAUI,KAAa,EAARF,EAAY,GAAKC,EAChCH,EAAUI,KAAa,EAARF,EAAY,GAAKC,EAChCH,EAAUI,KAAa,EAARF,EAAY,GAAK,IAChCH,EAAcpB,KAAK0B,IAAIhD,EAAW9C,GAAGwD,GAAIgC,GAI9C,OAAHH,QAAG,IAAHA,KAAKU,aAAaN,EAAW,EAAG,MAErC,CAAC3C,EAAYlD,EAAOC,IAEhB,4BAAQmG,GAAG,cAAcC,UAAU,qBAAqBrG,MAAOA,EAAOC,OAAQA,MCrCnFqG,G,MAAsD,CACxDC,EAAG,CAAC,IAAK,IAAK,KACdC,EAAG,CAAC,IAAK,EAAG,GACZC,EAAG,CAAC,EAAG,IAAK,GACZC,EAAG,CAAC,EAAG,EAAG,KACVC,EAAG,CAAC,IAAK,IAAK,GACdC,EAAG,CAAC,IAAK,EAAG,KACZC,EAAG,CAAC,EAAG,IAAK,OAsCDC,EA/BW,SAACC,GAAoC,IAEnDC,EAAeD,EAAfC,WA0BR,OAxBA3B,qBAAU,WACN,IAAM4B,EAAiB1B,SAASC,eAAe,gBAC/C,GAAIyB,GAAkBD,EAAY,CAC9B,IAAMvB,EAAsCwB,EAAgBvB,WAAW,MACpE,OAAHD,QAAG,IAAHA,KAAKE,UAAU,EAAG,EAAG,IAAK,KAI1B,IAFA,IAAMuB,EAAUF,EAAWrD,aACrBkC,EAAwBJ,EAAKK,gBAAgBkB,EAAWhH,MAAOgH,EAAW/G,QACvEG,EAAI,EAAGA,EAAI4G,EAAW/G,SAAUG,EACrC,IAAK,IAAIwD,EAAI,EAAGA,EAAIoD,EAAWhH,QAAS4D,EAAG,CACvC,IAAMmC,EAAQ3F,EAAI4G,EAAWhH,MAAQ4D,EAC/BuD,EAAQb,EAAuBY,EAAQ9G,GAAGwD,IAC5CuD,IACAtB,EAAUI,KAAa,EAARF,GAAaoB,EAAM,GAClCtB,EAAUI,KAAa,EAARF,EAAY,GAAKoB,EAAM,GACtCtB,EAAUI,KAAa,EAARF,EAAY,GAAKoB,EAAM,IAE1CtB,EAAUI,KAAa,EAARF,EAAY,GAAK,IAGrC,OAAHN,QAAG,IAAHA,KAAKU,aAAaN,EAAW,EAAG,MAErC,CAACmB,IAEG,4BAAQZ,GAAG,eAAepG,OAAiB,OAAVgH,QAAU,IAAVA,OAAA,EAAAA,EAAYhH,QAAS,IAAKC,QAAkB,OAAV+G,QAAU,IAAVA,OAAA,EAAAA,EAAY/G,SAAU,OCpBrFmH,EAnBa,SAAC,GAEK,IAD9BC,EAC6B,EAD7BA,aAEA,OAAKA,EAKD,+BACI,+BACI,4BACI,gDACA,4BAAKA,EAAavE,SAASS,mBARhC,MCJT+D,EAAmBC,WADD,0BAC4BC,MAAM,KAAK,IACzDC,EAAoBF,WAFF,0BAE6BC,MAAM,KAAK,IA6DjDE,EA3DoC,WAAO,IAAD,EAErBC,wBAAuCC,GAFlB,mBAE9CC,EAF8C,KAEpCC,EAFoC,OAGjBH,wBAAuCC,GAHtB,mBAG9CZ,EAH8C,KAGlCe,EAHkC,OAIjBJ,wBAA+BC,GAJd,mBAI9C1E,EAJ8C,KAIlC8E,EAJkC,OAKrBL,wBAAmDC,GAL9B,mBAK9CK,EAL8C,KAKpCC,EALoC,KAO/CC,EAAsC,SAAC,GAA4B,IAAD,mBAA1BN,EAA0B,KAAhB3E,EAAgB,KACpE4E,EAAYD,GACZE,EAAcF,EAAS7E,UACvBgF,EAAc9E,IAGlBmC,qBAAU,WACN,IACIxE,IAAkBuH,qBAAqBd,EAAUG,EAAWU,GAC9D,MAAO9F,GAELgG,QAAQC,IAAIjG,GAEhB6F,EAAY,IAAIK,OAAOC,KAAKC,mBAAmBlD,SAASC,eAAe,gBACxE,IAEHH,qBAAU,WACF4C,IAC0B,IAAIM,OAAOC,KAAKE,mBACxBC,YAAY,CACtBC,SAAU,IAAIL,OAAOC,KAAKK,OAAOvB,EAAUG,GAC3CqB,OAAQ,MAEZ,SAAC7C,EAA+C8C,GACxCA,IAAWR,OAAOC,KAAKQ,iBAAiBC,KACxChB,EAASiB,QAAQjD,EAAM2C,SAAUO,MACjClB,EAASmB,YAAW,SAKrC,CAACnB,IAKJ,OACI,yBAAK5B,UAAU,OACX,4BAAQA,UAAU,cACd,4CAAkBiB,GAClB,6CAAmBG,GACnB,6BACC,kBAAC,EAAD,CAAqBJ,aAAcQ,IACpC,6BACiB,kBAAC,EAAD,CAAmBb,WAAYA,IAC7B,kBAAC,EAAD,CAAkBhH,MAAO,IAAKC,OAAQ,IAAKiD,WAAYA,IAC1E,yBAAKkD,GAAG,WAAWiD,MAAO,CAAErJ,MAAO,IAAKC,OAAQ,UCrD5CqJ,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrE,SAASC,eAAe,SDiIpB,kBAAmBqE,WACrBA,UAAUC,cAAcC,MACrBzI,MAAK,SAAA0I,GACJA,EAAaC,gBAEdC,OAAM,SAAA7H,GACLgG,QAAQhG,MAAMA,EAAM8H,c","file":"static/js/main.6b07652b.chunk.js","sourcesContent":["import { inflate } from 'zlib';\r\n\r\nexport interface Point {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n};\r\n\r\nexport interface StreetViewPointCloud {\r\n    width: number,\r\n    height: number,\r\n    points: Point[][],\r\n};\r\n\r\nexport type DepthImage = Array<Array<number>>;\r\n\r\nexport interface Vector {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n};\r\n\r\nfunction dot(v1: Vector, v2: Vector) : number {\r\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n};\r\n\r\nexport interface Plane {\r\n    n: Vector,\r\n    d: number,\r\n};\r\n\r\nexport interface DepthMapMetaData {\r\n    metaDataSize: number,\r\n    numberOfPlanes: number,\r\n    width: number,\r\n    height: number,\r\n    offset: number,\r\n};\r\n\r\nexport interface StreetViewGeometry {\r\n    width: number,\r\n    height: number,\r\n    planeIndices: number[][],\r\n    planes: Plane[],\r\n};\r\n\r\nexport interface StreetViewDepthMap {\r\n    metaData: DepthMapMetaData,\r\n    bufferData: DataView,\r\n    geometry: StreetViewGeometry,\r\n};\r\n\r\nexport interface StreetViewResponse {\r\n    model: {\r\n        depth_map: string,\r\n    },\r\n};\r\n\r\nexport type DepthMapCallback = ([depthMap, depthImage]: [StreetViewDepthMap, DepthImage]) => void;\r\n\r\nfunction toDataView(buf: Buffer) : DataView {\r\n    const array = new Uint8Array(buf.length);\r\n    for (var i = 0; i < buf.length; ++i) {\r\n        array[i] = buf[i];\r\n    }\r\n    return new DataView(array.buffer);\r\n};\r\n\r\nfunction create2DArray<T>(width: number, height: number) : T[][] {\r\n    const array : T[][] = new Array<Array<T>>(height);\r\n    for (let h = 0; h < height; h++) {\r\n        array[h] = new Array<T>(width);\r\n    }\r\n    return array;\r\n};\r\n\r\nfunction getStreetViewDepthDataUrl(options : {[key: string] : any}) : string {\r\n    const queryString : string = Object.keys(options)\r\n        .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(options[key]))\r\n        .join('&');\r\n    return 'https://maps.google.com/cbk?' + queryString;\r\n}\r\n\r\nexport default class StreetViewUtility {\r\n\r\n    static fetchStreetViewImage(lat: number = 0.0, long: number = 0.0, callback: DepthMapCallback) : Promise<void> {\r\n        const url = getStreetViewDepthDataUrl({ output: 'json', ll: `${lat},${long}`, dm: 1 });\r\n        return fetch(url)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((response) => {\r\n                StreetViewUtility.parseDepthMapString(response.model.depth_map, callback);\r\n            });\r\n    }\r\n\r\n    static parseDepthMapString(rawDepthMapData: string, callback: DepthMapCallback) : void {\r\n        \r\n        while (rawDepthMapData.length % 4 !== 0) {\r\n            rawDepthMapData += '=';\r\n        }\r\n        rawDepthMapData = rawDepthMapData.replace(/-/g, '+');\r\n        rawDepthMapData = rawDepthMapData.replace(/_/g, '/');\r\n\r\n        inflate(Buffer.from(rawDepthMapData, 'base64'), (error: Error | null, result: Buffer) => {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            const dataView : DataView = toDataView(result);\r\n            const metaData : DepthMapMetaData = StreetViewUtility.getDepthMapMetaData(dataView);\r\n            const geometry : StreetViewGeometry = StreetViewUtility.getStreetViewGeometry(metaData, dataView);\r\n            const depthImage : number[][] = StreetViewUtility.getDepthImage(geometry);\r\n            callback([\r\n                {\r\n                    metaData,\r\n                    bufferData: dataView,\r\n                    geometry,\r\n                },\r\n                depthImage\r\n            ]);\r\n        });\r\n    }\r\n\r\n    static getDepthMapMetaData(buffer: DataView) : DepthMapMetaData {\r\n        return {\r\n            metaDataSize: buffer.getUint8(0),\r\n            numberOfPlanes: buffer.getUint16(1, true),\r\n            width: buffer.getUint16(3, true),\r\n            height: buffer.getUint16(5, true),\r\n            offset: buffer.getUint16(7, true),\r\n        };\r\n    }\r\n\r\n    static getStreetViewGeometry(metaData: DepthMapMetaData, buffer : DataView) : StreetViewGeometry {\r\n        const planes : Plane[] = new Array<Plane>(metaData.numberOfPlanes);\r\n        const planeIndices : number[][] = create2DArray<number>(metaData.width, metaData.height);\r\n        \r\n        // parsing referenced from https://github.com/proog128/GSVPanoDepth.js\r\n        for (let h = 0; h < metaData.height; h++) {\r\n            for (let w = 0; w < metaData.width; w++) {\r\n                planeIndices[h][w] = buffer.getUint8(metaData.offset + w + h * metaData.width);\r\n            }\r\n        }\r\n\r\n        const planesStartIndex = metaData.offset + metaData.height * metaData.width;\r\n        for (let p = 0; p < metaData.numberOfPlanes; ++p) {\r\n            // each plane is represented by four 32-bit floats\r\n            const offset : number = planesStartIndex + p * 4 * 4;\r\n            planes[p] = {\r\n                n: {\r\n                    x: buffer.getFloat32(offset, true),\r\n                    y: buffer.getFloat32(offset + 4, true),\r\n                    z: buffer.getFloat32(offset + 8, true),            \r\n                },\r\n                d: buffer.getFloat32(offset + 12, true),\r\n            };\r\n        }\r\n        return { width: metaData.width, height: metaData.height, planes, planeIndices };\r\n    }\r\n\r\n    static getDepthImage(geometry: StreetViewGeometry) {\r\n        const depthImage : number[][] = create2DArray(geometry.width, geometry.height);\r\n\r\n        // parsing referenced from https://github.com/proog128/GSVPanoDepth.js\r\n        for (let h = 0; h < depthImage.length; h++) {\r\n            const theta : number = (geometry.height - h - 0.5) / geometry.height * Math.PI;\r\n            const sinTheta : number = Math.sin(theta);\r\n            const cosTheta : number = Math.cos(theta);\r\n            for (let w = 0; w < depthImage[0].length; w++) {\r\n                const planeIndex : number = geometry.planeIndices[h][w];\r\n                if (planeIndex > 0) {\r\n                    const phi : number = (geometry.width - w - 0.5) * 2 * Math.PI / geometry.width;\r\n                    const viewDirection : Vector = {\r\n                        x: sinTheta * Math.cos(phi),\r\n                        y: sinTheta * Math.sin(phi),\r\n                        z: cosTheta,\r\n                    };\r\n                    const plane : Plane = geometry.planes[planeIndex];\r\n                    const distance : number = Math.abs(plane.d / (dot(plane.n, viewDirection)));\r\n                    depthImage[h][w] = distance;\r\n                } else {\r\n                    depthImage[h][w] = 0.0;\r\n                }\r\n            }\r\n        }\r\n        return depthImage;\r\n    }\r\n\r\n};","\r\nimport React, { useEffect } from 'react';\r\n\r\nimport './depthImageCanvas.css';\r\n\r\nconst DEPTH_IMAGE_VIZ_FACTOR : number = 2.5;\r\n\r\nexport interface DepthImageCanvasProps {\r\n    width: number,\r\n    height: number,\r\n    depthImage: number[][]|undefined,\r\n};\r\n\r\nconst DepthImageCanvas = ({\r\n    width,\r\n    height,\r\n    depthImage,\r\n} : DepthImageCanvasProps) => {\r\n\r\n    useEffect(() => {\r\n        const depthImageCanvas = document.getElementById('depth-image') as HTMLCanvasElement;\r\n        if (depthImage && depthImageCanvas) {\r\n            const ctx : CanvasRenderingContext2D|null = depthImageCanvas!.getContext('2d');\r\n            ctx?.clearRect(0, 0, width, height);\r\n    \r\n            let maxDistance : number = 0.0;\r\n            const imageData : ImageData = ctx!.createImageData(width, height);\r\n            for (let h = 0; h < height; ++h) {\r\n                for (let w = 0; w < width; ++w) {\r\n                    const index = h * width + w;\r\n                    const grayScale = depthImage[h][w] * DEPTH_IMAGE_VIZ_FACTOR;\r\n                    imageData.data[index * 4] = grayScale;\r\n                    imageData.data[index * 4 + 1] = grayScale;\r\n                    imageData.data[index * 4 + 2] = grayScale;\r\n                    imageData.data[index * 4 + 3] = 255.0;\r\n                    maxDistance = Math.max(depthImage[h][w], maxDistance);\r\n                }\r\n            }\r\n            // console.log('Maximum distance: ', maxDistance);\r\n            ctx?.putImageData(imageData, 0, 0);\r\n        }\r\n    }, [depthImage, width, height]);\r\n    \r\n    return <canvas id='depth-image' className='depth-image-canvas' width={width} height={height} />\r\n};\r\n\r\nexport default DepthImageCanvas;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { StreetViewGeometry } from '../../utils/StreetViewUtility';\r\n\r\nimport './depthPlanesCanvas.css';\r\n\r\nconst PLANE_INDEX_VIZ_COLORS : {[key: number] : number[]} = {\r\n    0: [255, 255, 255],\r\n    1: [255, 0, 0],\r\n    2: [0, 255, 0],\r\n    3: [0, 0, 255],\r\n    4: [255, 255, 0],\r\n    5: [255, 0, 255],\r\n    6: [0, 255, 255],\r\n};\r\n\r\nexport interface DepthPlanesCanvasProps {\r\n    planesData: StreetViewGeometry|undefined,\r\n};\r\n\r\nconst DepthPlanesCanvas = (props : DepthPlanesCanvasProps) => {\r\n    \r\n    const { planesData } = props;\r\n\r\n    useEffect(() => {\r\n        const depthMapCanvas = document.getElementById('depth-planes') as HTMLCanvasElement;\r\n        if (depthMapCanvas && planesData) {\r\n            const ctx : CanvasRenderingContext2D|null = depthMapCanvas!.getContext('2d');\r\n            ctx?.clearRect(0, 0, 512, 256);\r\n\r\n            const indices = planesData.planeIndices;\r\n            const imageData : ImageData = ctx!.createImageData(planesData.width, planesData.height);\r\n            for (let h = 0; h < planesData.height; ++h) {\r\n                for (let w = 0; w < planesData.width; ++w) {\r\n                    const index = h * planesData.width + w;\r\n                    const color = PLANE_INDEX_VIZ_COLORS[indices[h][w]];\r\n                    if (color) {\r\n                        imageData.data[index * 4] = color[0];\r\n                        imageData.data[index * 4 + 1] = color[1];\r\n                        imageData.data[index * 4 + 2] = color[2];\r\n                    }\r\n                    imageData.data[index * 4 + 3] = 255.0;\r\n                }\r\n            }\r\n            ctx?.putImageData(imageData, 0, 0);\r\n        }\r\n    }, [planesData]);\r\n\r\n    return <canvas id='depth-planes' width={planesData?.width || 512} height={planesData?.height || 256} />;\r\n};\r\n\r\nexport default DepthPlanesCanvas;\r\n","\r\nimport React from 'react';\r\n\r\nimport { StreetViewDepthMap } from '../../utils/StreetViewUtility';\r\n\r\nexport interface DepthMapDataDisplayProps {\r\n    depthMapData: StreetViewDepthMap|undefined,\r\n};\r\n\r\nconst DepthMapDataDisplay = ({\r\n    depthMapData\r\n} : DepthMapDataDisplayProps) => {\r\n    if (!depthMapData) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Number of Planes</td>\r\n                    <td>{depthMapData.metaData.numberOfPlanes}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default DepthMapDataDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './StreetViewReconstructionApp.css';\r\nimport StreetViewUtility, { StreetViewGeometry, DepthMapCallback, DepthImage, StreetViewDepthMap } from '../utils/StreetViewUtility';\r\n\r\nimport DepthImageCanvas from '../components/depth-image-canvas/DepthImageCanvas';\r\nimport DepthPlanesCanvas from '../components/depth-planes-canvas/DepthPlanesCanvas';\r\nimport DepthMapDataDisplay from '../components/depth-map-data-display/DepthMapDataDisplay';\r\n\r\nconst LOCATION_STRING = '37.7769799,-122.3949447';\r\nconst LATITUDE: number = parseFloat(LOCATION_STRING.split(',')[0]);\r\nconst LONGITUDE: number = parseFloat(LOCATION_STRING.split(',')[1]);\r\n\r\nconst StreetViewReconstructionApp : React.FC<{}> = () => {\r\n\r\n    const [depthMap, setDepthMap] = useState<StreetViewDepthMap|undefined>(undefined);\r\n    const [planesData, setPlanesData] = useState<StreetViewGeometry|undefined>(undefined);\r\n    const [depthImage, setDepthImage] = useState<DepthImage|undefined>(undefined);\r\n    const [panorama, setPanorama] = useState<google.maps.StreetViewPanorama|undefined>(undefined);\r\n\r\n    const loadDataCallback : DepthMapCallback = ([depthMap, depthImage]) => {\r\n        setDepthMap(depthMap);\r\n        setPlanesData(depthMap.geometry);\r\n        setDepthImage(depthImage);\r\n    };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            StreetViewUtility.fetchStreetViewImage(LATITUDE, LONGITUDE, loadDataCallback);\r\n        } catch (error) {\r\n            // show error message\r\n            console.log(error);\r\n        }\r\n        setPanorama(new google.maps.StreetViewPanorama(document.getElementById('panorama') as Element));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (panorama) {\r\n            const streetViewService = new google.maps.StreetViewService();\r\n            streetViewService.getPanorama({\r\n                    location: new google.maps.LatLng(LATITUDE, LONGITUDE),\r\n                    radius: 500,\r\n                },\r\n                (data: google.maps.StreetViewPanoramaData|null, status: google.maps.StreetViewStatus) => {\r\n                    if (status === google.maps.StreetViewStatus.OK) {\r\n                        panorama.setPano(data!.location!.pano!);\r\n                        panorama.setVisible(true);\r\n                    }\r\n                },\r\n            );\r\n        }\r\n    }, [panorama]);\r\n\r\n    const drawDepthImage = true;\r\n    const drawDepthMap = true;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <label>Latitude: {LATITUDE}</label>\r\n                <label>Longitude: {LONGITUDE}</label>\r\n                <br/>\r\n                {<DepthMapDataDisplay depthMapData={depthMap} />}\r\n                <br/>\r\n                {drawDepthMap && <DepthPlanesCanvas planesData={planesData} />}\r\n                {drawDepthImage && <DepthImageCanvas width={512} height={256} depthImage={depthImage} />}\r\n                <div id='panorama' style={{ width: 512, height: 512 }} />\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StreetViewReconstructionApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StreetViewReconstructionApp from './app/StreetViewReconstructionApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreetViewReconstructionApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}